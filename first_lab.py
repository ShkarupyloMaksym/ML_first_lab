# -*- coding: utf-8 -*-
"""first_lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19e4KQ51f69PpDm1zKulntJT_5Gu49xB6

# Download with pip
"""

# !pip install gdown

"""# Imports"""

import pandas as pd
import matplotlib.pyplot as plt
import os
import gdown
import re
# from IPython.display import display

"""# Constants"""

file_url = 'https://drive.google.com/file/d/1juCn7tAxBtb96K_bykl7gHTrcMUOdem4/view?usp=drive_link'
data_file_name = 'data.csv'

"""# Some functions"""

def convert_drive_link(original_link):
  if "https://drive.google.com/uc?id=" in original_link:
    return original_link

  pattern = r"https://drive\.google\.com/file/d/([a-zA-Z0-9_-]+)/view\?usp=drive_link"

  match = re.match(pattern, original_link)

  if match:
    file_id = match.group(1)
    converted_link = f"https://drive.google.com/uc?id={file_id}"
    return converted_link
  else:
    raise Exception(f"Not realized Google Drive link format.\nGiven link is {original_link}")
    return None


def install_from_google_drive(link, name, path=None, force_download = False):
  full_path = name
  if path is not None:
    full_path = os.path.join(path, full_path)
  if not force_download:
    if os.path.exists(full_path):
      print('The data already exists')
      return

  print('Start downloading')
  gdown.download(convert_drive_link(link), full_path, quiet=False)
  print('Downloading have ended')

def get_alphabet_position(letter):
    letter = letter.lower()
    alphabet = 'абвгґдеєжзиіїйклмнопрстуфхцчшщьюя'
    return alphabet.index(letter) + 1

"""# Download data"""

install_from_google_drive(file_url, data_file_name)

"""# Task

## Constants
"""

k = get_alphabet_position('Ш')
m = 9

pd.set_option('display.float_format', '{:.2f}'.format)

"""## 1. Відкрити та зчитати файл з даними."""

data = pd.read_csv(data_file_name)

"""## 2. Визначити та вивести кількість записів та кількість полів у кожному записі."""
print('\n\n2. Визначити та вивести кількість записів та кількість полів у кожному записі.')
shape = data.shape
print(f'Кількість записів: {shape[0]}\nКільість полів: {shape[1]}')

"""## 3. Вивести К+7 перших та 5К-3 останніх записів."""
print('\n\n3. Вивести К+7 перших та 5К-3 останніх записів.')
print(f'K + 7 = {k + 7}')
print(data.head(k+7))
print('\n\n')
print(f'5K - 3 = {5 * k - 3}')
print(data.tail(5 * k - 3))

"""## 4. Визначити та вивести тип полів кожного запису."""
print('\n\n4. Визначити та вивести тип полів кожного запису.')
print(pd.DataFrame(data.dtypes).reset_index().rename({'index': 'name', 0:'type'}, axis=1))

"""## 5. Привести поля, що відповідають обсягам продаж, до числового вигляду (показати, що це виконано)."""

col_names = ['Total Sales New', 'Total Sales Used']
for i in col_names:
  if data.dtypes[i] == object:
    data[i] = data[i].apply(lambda x: x.replace('$', '')).astype(int)

print('\n\n5. Привести поля, що відповідають обсягам продаж, до числового вигляду (показати, що це виконано).')
print(pd.DataFrame(data.dtypes).reset_index().rename({'index': 'name', 0:'type'}, axis=1))

"""## 6. Ввести нові поля:
### a. Сумарний обсяг продаж автомобілів (нових та б/в) у кожний період;

"""

data['Total Num'] = data['New'] + data['Used']

"""### b. Сумарний дохід від продажу автомобілів (нових та б/в) у кожний період;

"""

data['Total Sales'] = data['Total Sales New'] + data['Total Sales Used']

"""### c. Різницю в обсязі продаж нових та б/в автомобілів у кожній період."""

data['Difference New and Old'] = data['New'] - data['Used']
print('\n\n6. Ввести нові поля:/na. Сумарний обсяг продаж автомобілів (нових та б/в) у кожний період;\nb. Сумарний дохід від продажу автомобілів (нових та б/в) у кожний період;\nc. Різницю в обсязі продаж нових та б/в автомобілів у кожній період.')
print(data.head())

"""## 7. Змінити порядок розташування полів таким чином: Рік, Місяць, Сумарний дохід, Дохід від продажу нових автомобілів, Дохід від продажу б/в автомобілів, Сумарний обсяг продаж, Обсяг продаж нових автомобілів, Обсяг продаж б/в автомобілів, Різниця між обсягами продаж нових та б/в автомобілів."""

cols = ['Year', 'Month', 'Total Sales', 'Total Sales New', 'Total Sales Used', 'Total Num', 'New', 'Used', 'Difference New and Old']
data = data[cols]

print('\n\n7. Змінити порядок розташування полів таким чином: Рік, Місяць, Сумарний дохід, Дохід від продажу нових автомобілів, Дохід від продажу б/в автомобілів, Сумарний обсяг продаж, Обсяг продаж нових автомобілів, Обсяг продаж б/в автомобілів, Різниця між обсягами продаж нових та б/в автомобілів.')
print(data.head())

"""## 8. Визначити та вивести:
### a. Рік та місяць, у які нових автомобілів було продано менше за б/в;

"""

# year_mont_diff_less_zero = data[data['New'] < data['Used']][['Year', 'Month']]
year_mont_diff_less_zero = data[data['Difference New and Old'] < 0][['Year', 'Month']]

print('\n\n8. Визначити та вивести:\na. Рік та місяць, у які нових автомобілів було продано менше за б/в;')
print(year_mont_diff_less_zero)

"""### b. Рік та місяць, коли сумарний дохід був мінімальним;

"""

year_mont_max_sales = data.loc[[data['Total Sales'].idxmin()]][['Year', 'Month']]

print('\nb. Рік та місяць, коли сумарний дохід був мінімальним;')
print(year_mont_max_sales.head())

"""### c. Рік та місяць, коли було продано найбільше б/в авто."""

year_mont_max_old_sales = data.loc[[data['Used'].idxmax()]][['Year', 'Month']]

print('\nc. Рік та місяць, коли було продано найбільше б/в авто.')
print(year_mont_max_old_sales.head())

"""## 9. Визначити та вивести:
### a. Сумарний обсяг продажу транспортних засобів за кожен рік;

"""

summ_of_saling = data.groupby('Year')['Total Num'].sum()

print('\n\n9. Визначити та вивести:\na. Сумарний обсяг продажу транспортних засобів за кожен рік;')
print(pd.DataFrame(summ_of_saling).reset_index())

"""### b. Середній дохід від продажу б/в транспортних засобів в місяці М, де М – це порядковий номер у списку підгрупи за абеткою."""

months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
only_M_date = data[data['Month'] == months[m - 1]]
aver_in_M_month = only_M_date.groupby('Month')['Total Sales Used'].mean()

print('\nb. Середній дохід від продажу б/в транспортних засобів в місяці М, де М – це порядковий номер у списку підгрупи за абеткою.')
print(pd.DataFrame(aver_in_M_month).reset_index())

"""## 10.  Побудувати стовпчикову діаграму обсягу продаж нових авто у році 20YY, де дві останні цифри року визначаються як 17 – порядковий номер у списку підгрупи за абеткою."""

num = 17 - m
year = int(f'20{str(num).zfill(2)}')

data_for_year = data[data['Year'] == year]

grouped_month_sales = data_for_year.groupby('Month', sort=False)['Total Sales New'].sum().reset_index()

plt.bar(grouped_month_sales['Month'], grouped_month_sales['Total Sales New'])
plt.title(f'Продаж машин за місяціми в {year}')
plt.xlabel('Назви місяців')
plt.ylabel('Кількість проданих')
plt.show()

"""## 11. Побудувати кругову діаграму сумарного обсягу продаж за кожен рік."""

result_df = pd.DataFrame(summ_of_saling).reset_index()
plt.pie(result_df['Total Num'], labels=result_df['Year'])
plt.title('Сумарний обсяг продаж за кожен рік')
plt.show()

"""## 12. Побудувати на одному графіку:
### a. Сумарний дохід від продажу нових авто;

"""

summ_of_saling_new = data.groupby('Year')['Total Sales New'].sum()
summ_of_saling_new = pd.DataFrame(summ_of_saling_new).reset_index()

"""### b. Сумарний дохід від продажу старих авто."""

summ_of_saling_used = data.groupby('Year')['Total Sales Used'].sum()
summ_of_saling_used = pd.DataFrame(summ_of_saling_used).reset_index()

plt.plot(summ_of_saling_new['Year'], summ_of_saling_new['Total Sales New'], label='Total Sales New')
plt.plot(summ_of_saling_used['Year'], summ_of_saling_used['Total Sales Used'], label='Total Sales Used')
plt.xticks(summ_of_saling_used['Year'], rotation=45)
plt.title('Порівняння графіків продаж нових і б/в авто за роками')
plt.legend()
plt.show()

